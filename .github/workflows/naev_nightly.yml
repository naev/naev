on:
  repository_dispatch:
    types: manual-nightly
  schedule:
    - cron: '0 0 * * *'

name: Nightly Release

jobs:
  "Windows-MinGW64":
    runs-on: windows-latest

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - name: Setup MINGW64 Environment
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: mingw-w64-x86_64-libtool mingw-w64-x86_64-toolchain mingw-w64-x86_64-gcc mingw-w64-x86_64-SDL2 mingw-w64-x86_64-SDL2_mixer mingw-w64-x86_64-SDL2_image mingw-w64-x86_64-libxml2 mingw-w64-x86_64-libpng mingw-w64-x86_64-openal mingw-w64-x86_64-libvorbis mingw-w64-x86_64-binutils mingw-w64-x86_64-fontconfig mingw-w64-x86_64-freetype mingw-w64-x86_64-libzip mingw-w64-x86_64-gettext mingw-w64-x86_64-luajit mingw-w64-x86_64-nsis libtool autoconf autoconf-archive automake automake-wrapper git gettext pkgconfig make intltool zip unzip python3-pip

    - name: Checkout Naev Repository 
      uses: actions/checkout@v2

    - name: Build Naev on Win64
      run: |
        ./autogen.sh
        ./configure --disable-debug --without-libzip
        make -j$(nproc --all)
      env:
        CFLAGS: "-O3"

    - name: Build Windows Installer
      run: |
        ./extras/windows/packageWindows.sh --nightly

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: win64
        path: |
          ${{ github.workspace }}/dist/release/naev-win64.exe
          ${{ github.workspace }}/dist/release/naev-win64.zip

  "Linux-x86_64":
    runs-on: ubuntu-latest

    steps:
    - name: Update APT Cache
      run: |
        sudo apt-get update

    - name: Install Build Dependencies
      run: |
        sudo apt-get install \
          build-essential \
          automake \
          autoconf-archive \
          binutils-dev \
          libsdl2-dev \
          libsdl2-mixer-dev \
          libsdl2-image-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libxml2-dev \
          libfontconfig1-dev \
          libfreetype6-dev \
          libpng-dev \
          libopenal-dev \
          libvorbis-dev \
          libiberty-dev \
          gettext \
          autopoint \
          intltool

    - name: Checkout Naev Repository 
      uses: actions/checkout@v2

    - name: Build Naev on Linux64
      run: |
        ./autogen.sh
        ./configure --disable-debug --without-libzip --build=x86_64-linux-gnu --host=x86_64-linux-gnu
        make -j$(nproc --all)
      env:
        CFLAGS: "-O3"

    - name: Package Linux64 Release
      run: |
        chmod +x src/naev

        BUILD_DATE="$(date +%m_%d_%Y)"

        VERSION="$(cat VERSION)"

        # Get version, negative minors mean betas
        if [[ -n $(echo "${VERSION}" | grep "-") ]]; then
          BASEVER=$(echo "${VERSION}" | sed 's/\.-.*//')
          BETAVER=$(echo "${VERSION}" | sed 's/.*-//')
          VERSION="${BASEVER}.0-beta.${BETAVER}"
        fi 

        mkdir -p dist/release/naev-$VERSION-$BUILD_DATE-linux-x86-64/ndata
        mkdir -p dist/release/tar

        mv src/naev dist/release/naev-$VERSION-$BUILD_DATE-linux-x86-64/naev-$VERSION-$BUILD_DATE-linux-x86-64
        chmod +x dist/release/naev-$VERSION-$BUILD_DATE-linux-x86-64/naev-$VERSION-$BUILD_DATE-linux-x86-64

        cp -r dat/ dist/release/naev-$VERSION-$BUILD_DATE-linux-x86-64/ndata
        cp AUTHORS dist/release/naev-$VERSION-$BUILD_DATE-linux-x86-64/ndata
        cp VERSION dist/release/naev-$VERSION-$BUILD_DATE-linux-x86-64/ndata

        cd dist/release
        tar -czvf linux-x86-64.tar.gz naev-$VERSION-$BUILD_DATE-linux-x86-64
        mv linux-x86-64.tar.gz tar/

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: linux-x86-64
        path: ${{ github.workspace }}/dist/release/tar/linux-x86-64.tar.gz

  "Linux-x86_64-SteamRuntime":
    runs-on: ubuntu-latest

    container:
      image: dosowisko/steam-runtime-amd64
      volumes:
        - ${{ github.workspace }}:${{ github.workspace }}
        
    steps:
    - name: Clone Naev Repository 
      run: |
        git clone https://github.com/naev/naev.git ${{ github.workspace }}

    - name: Install Additional Build Dependencies
      run: |
        sudo apt-get -y install autoconf-archive intltool

    - name: Build Naev for Steam on Linux64
      run: |
        cd ${{ github.workspace }}
        ./autogen.sh
        ./configure --disable-debug --without-libzip --build=x86_64-linux-gnu
        make -j$(nproc --all)
      env:
        CFLAGS: "-O3 -std=gnu11"

    - name: Collect Steam Linux64 Release
      run: |
        mkdir -p ${{ github.workspace }}/dist/release/

        mv ${{ github.workspace }}/src/naev ${{ github.workspace }}/dist/release/naev.x64
        chmod +x ${{ github.workspace }}/dist/release/naev.x64

    - name: Upload Artifact
      uses: actions/upload-artifact@v1
      with:
        name: steam-x86-64
        path: ${{ github.workspace }}/dist/release/naev.x64

  "macOS":
    runs-on: macos-latest

    steps:
    - name: Update Homebrew Cache
      run: |
        brew update

    - name: Install Additional Build Dependencies
      run: |
        brew install \
          automake \
          autoconf-archive \
          pkg-config \
          fontconfig \
          luajit \
          intltool \
          sdl2 \
          sdl2_mixer \
          sdl2_image \
          openal-soft
          
    - name: Remove Homebrew Perl
      run: |
        brew uninstall --ignore-dependencies perl
        
    - name: Checkout Naev Repository 
      uses: actions/checkout@v2

    - name: Build Naev on MacOS
      run: |
        # PKGCONFIG configuration for OpenAL
        export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:/usr/local/opt/openal-soft/lib/pkgconfig"
        
        ./autogen.sh
        ./configure --disable-debug --without-libzip
        make -j$(sysctl -n hw.logicalcpu)
      env:
        CFLAGS: "-O3 -mmacosx-version-min=10.7"
    
    - name: Package MacOS Release
      run: |
        mkdir -p dist/release

        ./extras/macos/bundle.sh
        cp AUTHORS Naev.app/Contents/Resources/ndata/
        cp VERSION Naev.app/Contents/Resources/ndata/
        cp -r dat/ Naev.app/Contents/Resources/ndata/
        zip -r dist/release/naev-macos.zip Naev.app/*

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: macos
        path: ${{ github.workspace }}/dist/release/naev-macos.zip

  "Generate-Source":
      runs-on: ubuntu-latest

      steps:
      - name: Update APT Cache
        run: |
          sudo apt-get update

      - name: Install Build Dependencies
        run: |
          sudo apt-get install \
            build-essential \
            automake \
            autoconf-archive \
            libsdl2-dev \
            libsdl2-mixer-dev \
            libsdl2-image-dev \
            libgl1-mesa-dev \
            libxml2-dev \
            libfontconfig1-dev \
            libfreetype6-dev \
            libpng-dev \
            libopenal-dev \
            libvorbis-dev \
            binutils-dev \
            libzip-dev \
            libiberty-dev \
            gettext \
            autopoint \
            intltool

      - name: Checkout Naev Repository 
        uses: actions/checkout@v2

      - name: Generate source archive
        run: |
          ./autogen.sh
          ./configure
          make dist-gzip

      - name: Check if source archive is valid
        run: |
          # This currently doesn't work correctly.
          # make distcheck 

      - name: Prepare source artifact
        run: |
          make VERSION
          VERSION="$(cat VERSION)"
          mkdir -p dist/release
          mv naev-$VERSION.tar.gz dist/release/source.tar.gz

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: source
          path: ${{ github.workspace }}/dist/release/source.tar.gz

  "Upload-Release":
      runs-on: ubuntu-latest
      needs: [Linux-x86_64, Windows-MinGW64, macOS, Generate-Source]
      if: ${{ github.repository == 'naev/naev' }} 

      steps:
      - name: Update APT Cache
        run: |
          sudo apt-get update

      - name: Install Build Dependencies
        run: |
          sudo apt-get install \
            build-essential \
            automake \
            autoconf-archive \
            libsdl2-dev \
            libsdl2-mixer-dev \
            libsdl2-image-dev \
            libgl1-mesa-dev \
            libxml2-dev \
            libfontconfig1-dev \
            libfreetype6-dev \
            libpng-dev \
            libopenal-dev \
            libvorbis-dev \
            binutils-dev \
            libzip-dev \
            libiberty-dev \
            gettext \
            autopoint \
            intltool

      - name: Checkout Naev Repository 
        uses: actions/checkout@v2

      - name: Get VERSION
        run: |
          ./autogen.sh
          ./configure
          make VERSION

      - name: Create Release Staging Area
        run: |
          mkdir -p dist/release

      - name: Download Build Artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ github.workspace }}/dist
          
      - name: Collect files for distribution
        run: |
          BUILD_DATE="$(date +%m_%d_%Y)"

          VERSION="$(cat VERSION)"
           # Get version, negative minors mean betas
          if [[ -n $(echo "${VERSION}" | grep "-") ]]; then
              BASEVER=$(echo "${VERSION}" | sed 's/\.-.*//')
              BETAVER=$(echo "${VERSION}" | sed 's/.*-//')
              VERSION="${BASEVER}.0-beta.${BETAVER}"
          fi

          mv dist/linux-x86-64/linux-x86-64.tar.gz dist/release/naev-$VERSION-$BUILD_DATE-linux-x86-64.tar.gz
          mv dist/macos/naev-macos.zip dist/release/naev-$VERSION-$BUILD_DATE-macos.zip
          mv dist/win64/naev-win64.exe dist/release/naev-$VERSION-$BUILD_DATE-win64.exe
          mv dist/source/source.tar.gz dist/release/naev-$VERSION-$BUILD_DATE-source.tar.gz

      - name: Upload Release Assets
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "nightly"
          prerelease: true
          title: "Nightly Build"
          files: |
            ${{ github.workspace }}/dist/release/*

  "Upload-Steam":
      runs-on: ubuntu-latest
      needs: [Linux-x86_64-SteamRuntime, Windows-MinGW64, macOS]
      if: ${{ github.repository == 'naev/naev' }}

      steps:
      - name: Update APT Cache
        run: |
          sudo add-apt-repository multiverse
          sudo dpkg --add-architecture i386
          sudo apt-get update
          
      - name: Install Build Dependencies
        run: |
          sudo apt-get install \
            build-essential \
            automake \
            autoconf-archive \
            libsdl2-dev \
            libsdl2-mixer-dev \
            libsdl2-image-dev \
            libgl1-mesa-dev \
            libxml2-dev \
            libfontconfig1-dev \
            libfreetype6-dev \
            libpng-dev \
            libopenal-dev \
            libvorbis-dev \
            binutils-dev \
            libzip-dev \
            libiberty-dev \
            gettext \
            autopoint \
            intltool

      - name: Install SteamCMD
        run: |
          echo steamcmd steam/question select "I AGREE" | sudo debconf-set-selections
          sudo apt install lib32gcc1 steamcmd

      - name: Checkout Naev Repository 
        uses: actions/checkout@v2
        
      - name: Get VERSION
        run: |
          ./autogen.sh
          ./configure
          make VERSION

      - name: Create Release Staging Area
        run: |
          mkdir -p ${{ github.workspace }}/dist/steam/ndata

      - name: Make data
        run: |
          ./autogen.sh
          ./configure
          make pot
          cp -r dat/ dist/steam/ndata
          cp AUTHORS dist/steam/ndata
          cp VERSION dist/steam/ndata

      - name: Download Build Artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ github.workspace }}/dist/steam
          
      - name: Build and Upload Steam Release
        run: |
          ./extras/steam/SteamDeploy.sh --nightly
        env:
          STEAMCMD_USER: ${{ secrets.STEAMCMD_USER }}
          STEAMCMD_PASS: ${{ secrets.STEAMCMD_PASS }}
          TFA_IMAP: ${{ secrets.TFA_IMAP }}
          TFA_PASS: ${{ secrets.TFA_PASS }}
          TFA_USER: ${{ secrets.TFA_USER }}
