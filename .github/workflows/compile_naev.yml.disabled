name: "Compile Naev"
on:
  workflow_call:
    inputs:
      platform:
        description: 'Platform to build for'
        required: true
        type: string
      build_type:
        description: 'Build type (e.g. Debug, Release)'
        required: false
        type: string
      release:
        description: 'Build release'
        required: false
        default: false
        type: boolean
permissions: {}

jobs:
  source_build:
    if: ${{ inputs.platform == 'source' }}
    permissions:
      contents: read
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/naev/naev-release:latest"
    steps:
      - name: Checkout Naev Repository
        uses: actions/checkout@v4
        with:
          path: source
          fetch-depth: 0
          submodules: true

      - name: Configure Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: "x86_64-unknown-linux-gnu"
          override: true
          rustflags: ""

      - name: Install bindgen-cli
        uses: baptiste0928/cargo-install@v3
        with:
          crate: bindgen-cli

      - name: Package Dist
        run: |
          meson setup build source -Dexecutable=disabled -Ddocs_c=disabled -Ddocs_lua=disabled
          meson dist -C build --no-tests --include-subprojects

      - name: Upload Dist Artifact
        uses: actions/upload-artifact@v4
        with:
          name: naev-dist-${{ github.sha }}
          path: ${{ github.workspace }}/build/meson-dist/*

      - name: Upload Version Artifact
        uses: actions/upload-artifact@v4
        if: github.event.inputs.release
        with:
          name: naev-version
          path: ${{ github.workspace }}/build/dist/VERSION
          if-no-files-found: error

      - name: Upload AppImage Packaging Script Artifact
        uses: actions/upload-artifact@v4
        if: github.event.inputs.release
        with:
          name: naev-appimage-packaging
          path: ${{ github.workspace }}/build/dist/buildAppImage.sh
          if-no-files-found: error

      - name: Upload Universal Bundle Packaging Script Artifact
        uses: actions/upload-artifact@v4
        if: github.event.inputs.release
        with:
          name: naev-macos-packaging
          path: ${{ github.workspace }}/build/dist/buildUniversalBundle.sh
          if-no-files-found: error

      - name: Upload DMG Assets Artifact
        uses: actions/upload-artifact@v4
        if: github.event.inputs.release
        with:
          name: naev-macos-dmg
          path: ${{ github.workspace }}/build/dist/dmg_assets
          if-no-files-found: error
          include-hidden-files: true

      - name: Upload Entitlements PLIST Artifact
        uses: actions/upload-artifact@v4
        if: github.event.inputs.release
        with:
          name: naev-macos-entitlements
          path: ${{ github.workspace }}/build/dist/entitlements.plist
          if-no-files-found: error

      - name: Upload GitHub Deployment Artifact
        uses: actions/upload-artifact@v4
        if: github.event.inputs.release
        with:
          name: naev-github-deployment
          path: ${{ github.workspace }}/build/dist/gh/*
          if-no-files-found: error

      - name: Upload Steam Deployment Script Artifact
        uses: actions/upload-artifact@v4
        if: github.event.inputs.release
        with:
          name: naev-steam-deployment
          path: ${{ github.workspace }}/build/dist/steam/*
          if-no-files-found: error

      - name: Upload Itch Deployment Artifact
        uses: actions/upload-artifact@v4
        if: github.event.inputs.release
        with:
          name: naev-itch-deployment
          path: ${{ github.workspace }}/build/dist/itch/*
          if-no-files-found: error
          include-hidden-files: true

  docs_luacheck:
    permissions:
      contents: write
    if: ${{ inputs.platform == 'docs' }}
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/naev/naev-steamruntime:latest"

    steps:
      - name: Get Source
        uses: actions/download-artifact@v4
        with:
          name: naev-dist-${{ github.sha }}

      - name: Extract Source
        run: |
          mkdir source
          tar -xf naev-*.tar.xz -C source --strip 1

      - name: Configure Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: "x86_64-unknown-linux-gnu"
          override: true
          rustflags: ""

      - name: Install bindgen-cli
        uses: baptiste0928/cargo-install@v3
        with:
          crate: bindgen-cli

      - name: Meson Setup
        id: setup
        run: |
          meson setup build source \
              --native-file='source/utils/build/linux.ini' \
              --buildtype=debug \
              -Dinstaller=false \
              -Db_lto=true \
              -Dauto_features=enabled \
              -Ddocs_c=disabled \
              -Ddocs_lua=disabled

      - name: Meson Compile
        id: compile
        run: |
          meson compile -C build

      - name: Meson Test
        id: test
        run: |
          meson test luacheck -C build

      - name: Upload Test Log
        uses: actions/upload-artifact@v4
        if: ${{ success() || steps.test.outcome == 'failure' }}
        with:
          name: ${{ github.sha }}-lualint-testlog
          path: ${{ github.workspace }}/build/meson-logs/testlog.txt

  docs_build:
    needs: "docs_luacheck"
    permissions:
      contents: write
    if: ${{ inputs.platform == 'docs' }}
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/naev/naev-docs:latest"

    steps:
      - name: Get Source
        uses: actions/download-artifact@v4
        with:
          name: naev-dist-${{ github.sha }}

      - name: Extract Source
        run: |
          mkdir source
          tar -xf naev-*.tar.xz -C source --strip 1

      - name: Configure Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: "x86_64-unknown-linux-gnu"
          override: true
          rustflags: ""

      - name: Install bindgen-cli
        uses: baptiste0928/cargo-install@v3
        with:
          crate: bindgen-cli

      - name: Meson Setup
        run: |
          meson setup build source \
              -Dexecutable=disabled

      - name: Meson Compile
        id: compile
        run: |
          meson compile -C build

      - name: Upload Compile Log
        uses: actions/upload-artifact@v4
        if: ${{ steps.compile.outcome == 'failure' }}
        with:
          name: ${{ github.sha }}-ldoc-log
          path: ${{ github.workspace }}/build/meson-logs/meson-log.txt

  windows_build:
    permissions:
      contents: write
    if: ${{ inputs.platform == 'windows' }}
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/naev/naev-windows:latest"
      env:
        PKG_CONFIG: "x86_64-w64-mingw32-pkg-config"
        PKG_CONFIG_PATH: "/usr/x86_64-w64-mingw32/sys-root/mingw/lib/pkgconfig"
        BINDGEN_EXTRA_CLANG_ARGS: "--sysroot=/usr/x86_64-w64-mingw32/sys-root/mingw --target=x86_64-w64-mingw32"

    steps:
      - name: Get Source
        uses: actions/download-artifact@v4
        with:
          name: naev-dist-${{ github.sha }}

      - name: Extract Source
        run: |
          mkdir source
          tar -xf naev-*.tar.xz -C source --strip 1

      - name: Configure Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: "x86_64-pc-windows-gnu"
          override: true
          rustflags: ""

      - name: Install bindgen-cli
        uses: baptiste0928/cargo-install@v3
        with:
          crate: bindgen-cli

      - name: Meson Setup
        # We disable b_lto here because it messes with backtraces on windows
        run: |
          meson setup build source \
              --prefix="$(pwd)"/source/extras/windows/installer \
              --bindir=. \
              -Dndata_path=. \
              --cross-file='source/utils/build/windows_cross_mingw.ini' \
              --native-file='source/utils/build/linux.ini' \
              --buildtype='${{ inputs.build_type }}' \
              --wrap-mode=nopromote \
              -Dinstaller='${{ inputs.release }}' \
              -Drelease='${{ inputs.release }}' \
              -Db_lto=false \
              -Dauto_features=enabled \
              -Ddocs_c=disabled \
              -Ddocs_lua=disabled

      - name: Upload Setup Log
        uses: actions/upload-artifact@v4
        if: ${{ success() || steps.setup.outcome == 'failure' }}
        with:
          name: naev-macos.${{ matrix.arch }}-${{ github.sha }}-${{ inputs.build_type }}-setup-log
          path: ${{ github.workspace }}/build/meson-logs/meson-log.txt

      - name: Meson Compile
        id: compile
        run: |
          meson compile -C build

      - name: Upload Compile Log
        uses: actions/upload-artifact@v4
        if: ${{ success() || steps.compile.outcome == 'failure' }}
        with:
          name: naev-macos.${{ matrix.arch }}-${{ github.sha }}-${{ inputs.build_type }}-compile-log
          path: ${{ github.workspace }}/build/meson-logs/meson-log.txt

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: naev-macos.${{ matrix.arch }}-${{ github.sha }}-${{ inputs.build_type }}-buildArtifacts
          path: |
            ${{ github.workspace }}/build
          if-no-files-found: error

      - name: Test Install
        id: install
        run: |
          meson install -C build

      - name: Upload Install Log
        uses: actions/upload-artifact@v4
        if: ${{ success() || steps.install.outcome == 'failure' }}
        with:
          name: naev-macos.${{ matrix.arch }}-${{ github.sha }}-${{ inputs.build_type }}-install-log
          path: ${{ github.workspace }}/build/meson-logs/meson-log.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        if: github.event.inputs.release
        with:
          name: naev-win64
          path: ${{ github.workspace }}/build/dist/*
          if-no-files-found: error

  macos_build:
    permissions:
      contents: write
    if: ${{ inputs.platform == 'macos' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86_64
            deploymenttarget: "11.0"
            config: macos_cross_osxcross.ini
          - arch: aarch64
            deploymenttarget: "13.0"
            config: macos_aarch64_cross_osxcross.ini
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/naev/naev-macos:latest"
      env:
        BUILDARCH: "${{ matrix.arch }}"
        HOST: "${{ matrix.arch }}-apple-darwin23"
        MACOSX_DEPLOYMENT_TARGET: "${{ matrix.deploymenttarget }}"
        PKG_CONFIG: "${{ matrix.arch }}-apple-darwin23-pkg-config"
        PKG_CONFIG_PATH: "/usr/lib/osxcross/macports/pkgs/opt/local/lib/pkgconfig"
        BINDGEN_EXTRA_CLANG_ARGS: "--sysroot=/usr/lib/osxcross/SDK/MacOSX14.sdk --target=${{ matrix.arch }}-apple-darwin"

    steps:
      - name: Configure Build Environment
        run: |
          echo "Configuring MacPorts packages and build env variables for $BUILDARCH."
          if [[ "$BUILDARCH" == "aarch64" ]] then
            rm -f /usr/lib/osxcross/macports
            ln -s /usr/lib/osxcross/macports.aarch64 /usr/lib/osxcross/macports
          elif [[ "$BUILDARCH" == "x86_64" ]] then
            rm -f /usr/lib/osxcross/macports
            ln -s /usr/lib/osxcross/macports.x86_64 /usr/lib/osxcross/macports
          # Fallback
          else
            rm -f /usr/lib/osxcross/macports
            ln -s /usr/lib/osxcross/macports.x86_64 /usr/lib/osxcross/macports
          fi

      - name: Configure Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: "${{ matrix.arch }}-apple-darwin"
          override: true
          rustflags: ""

      - name: Install bindgen-cli
        uses: baptiste0928/cargo-install@v3
        with:
          crate: bindgen-cli
          git: https://github.com/rust-lang/rust-bindgen.git
          commit: bd011d43e2d18078606350eb8c33048bf8a59bac

      - name: Get Source
        uses: actions/download-artifact@v4
        with:
          name: naev-dist-${{ github.sha }}

      - name: Extract Source
        run: |
          mkdir source
          tar -xf naev-*.tar.xz -C source --strip 1

      - name: Meson Setup
        id: setup
        run: |
          meson setup build source \
              --prefix="$(pwd)"/build/dist/Naev.app \
              --bindir=Contents/MacOS \
              --libdir=Contents/Frameworks \
              -Dndata_path=Contents/Resources \
              --cross-file='source/utils/build/${{ matrix.config }}' \
              --native-file='source/utils/build/linux.ini' \
              --buildtype='${{ inputs.build_type }}' \
              -Dinstaller=false \
              -Drelease='${{ inputs.release }}' \
              -Db_lto=true \
              -Dauto_features=enabled \
              -Ddocs_c=disabled \
              -Ddocs_lua=disabled


      - name: Upload Setup Log
        uses: actions/upload-artifact@v4
        if: ${{ success() || steps.setup.outcome == 'failure' }}
        with:
          name: naev-macos.${{ matrix.arch }}-${{ github.sha }}-${{ inputs.build_type }}-setup-log
          path: ${{ github.workspace }}/build/meson-logs/meson-log.txt

      - name: Meson Compile
        id: compile
        run: |
          meson compile -C build

      - name: Upload Compile Log
        uses: actions/upload-artifact@v4
        if: ${{ success() || steps.compile.outcome == 'failure' }}
        with:
          name: naev-macos.${{ matrix.arch }}-${{ github.sha }}-${{ inputs.build_type }}-compile-log
          path: ${{ github.workspace }}/build/meson-logs/meson-log.txt

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: naev-macos.${{ matrix.arch }}-${{ github.sha }}-${{ inputs.build_type }}-buildArtifacts
          path: |
            ${{ github.workspace }}/build
          if-no-files-found: error

      - name: Test Install
        id: install
        run: |
          meson install -C build

      - name: Upload Install Log
        uses: actions/upload-artifact@v4
        if: ${{ success() || steps.install.outcome == 'failure' }}
        with:
          name: naev-macos.${{ matrix.arch }}-${{ github.sha }}-${{ inputs.build_type }}-install-log
          path: ${{ github.workspace }}/build/meson-logs/meson-log.txt

      - name: Fix zip name
        if: github.event.inputs.release
        run: |
          mv build/dist/naev-macos.zip build/dist/naev-macos-${{ matrix.arch }}.zip

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        if: github.event.inputs.release
        with:
          name: naev-macos-${{ matrix.arch }}
          path: ${{ github.workspace }}/build/dist/naev-macos-${{ matrix.arch }}.zip
          if-no-files-found: error

  linux_build:
    permissions:
      contents: write
    if: ${{ inputs.platform == 'linux' }}
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/naev/naev-steamruntime:latest"
      volumes:
        - "${{ github.workspace }}:${{ github.workspace }}"

    steps:
      - name: Get Source
        uses: actions/download-artifact@v4
        with:
          name: naev-dist-${{ github.sha }}

      - name: Extract Source
        run: |
          mkdir source
          tar -xf naev-*.tar.xz -C source --strip 1

      - name: Configure Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: "x86_64-unknown-linux-gnu"
          override: true
          rustflags: ""

      - name: Install bindgen-cli
        uses: baptiste0928/cargo-install@v3
        with:
          crate: bindgen-cli

      - name: Meson Setup
        id: setup
        run: |
          meson setup build source \
              --native-file='source/utils/build/linux_steamruntime.ini' \
              --buildtype='${{ inputs.build_type }}' \
              --force-fallback-for=sdl2_image,glpk,SuiteSparse \
              -Dsteamruntime='${{ inputs.release }}' \
              -Dprefix="/usr" \
              -Db_lto=true \
              -Dinstaller='${{ inputs.release }}' \
              -Db_lto=true \
              -Dauto_features=enabled \
              -Ddocs_c=disabled \
              -Ddocs_lua=disabled

      - name: Upload Setup Log
        uses: actions/upload-artifact@v4
        if: ${{ success() || steps.setup.outcome == 'failure' }}
        with:
          name: naev-steamruntime-${{ github.sha }}-${{ inputs.build_type }}-setup-log
          path: ${{ github.workspace }}/build/meson-logs/meson-log.txt

      - name: Meson Compile
        id: compile
        run: |
          meson compile -C build

      - name: Upload Compile Log
        uses: actions/upload-artifact@v4
        if: ${{ success() || steps.compile.outcome == 'failure' }}
        with:
          name: naev-steamruntime-${{ github.sha }}-${{ inputs.build_type }}-compile-log
          path: ${{ github.workspace }}/build/meson-logs/meson-log.txt

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: naev-steamruntime-${{ github.sha }}-${{ inputs.build_type }}-buildArtifacts
          path: ${{ github.workspace }}/build

      - name: Test Install
        id: install
        run: |
          meson install -C build
        env:
          DESTDIR: "${{ github.workspace }}/staging"

      - name: Upload Install Log
        uses: actions/upload-artifact@v4
        if: ${{ success() || steps.install.outcome == 'failure' }}
        with:
          name: naev-steamruntime-${{ github.sha }}-${{ inputs.build_type }}-${{ inputs.build_type }}-install-log
          path: ${{ github.workspace }}/build/meson-logs/meson-log.txt

      - name: Compile Test AppImage
        if: github.event.inputs.release == false
        id: appimageCompile
        run: |
            ./source/utils/buildAppImage.sh -d -i -s source -b appImageBuild | tee appImageBuildLog.txt
            ls ${{ github.workspace }}/appImageBuild/dist/*.AppImage >/dev/null || exit

      - name: Upload Test AppImage Compile Log
        uses: actions/upload-artifact@v4
        if: ${{ (success() || steps.appimageCompile.outcome == 'failure') }}
        with:
          name: naev-steamruntime-${{ github.sha }}-${{ inputs.build_type }}-AppImageBuild-log
          path: ${{ github.workspace }}/appImageBuildLog.txt

      - name: Upload Test AppImage
        if: github.event.inputs.release == false
        uses: actions/upload-artifact@v4
        with:
          name: naev-steamruntime-${{ github.sha }}-${{ inputs.build_type }}-AppImageBuild-appimage
          path: ${{ github.workspace }}/appImageBuild/dist/*.AppImage

      - name: Compile Release AppDir
        if: github.event.inputs.release
        run: |
              ./source/utils/buildAppImage.sh -d -n -s source -b build

      - name: Collect Steam Linux64 Artifacts
        if: github.event.inputs.release
        run: |
          mkdir -p build/dist/

          mv staging/usr/bin/naev build/dist/naev.x64
          chmod +x build/dist/naev.x64

          tar -cJvf build/dist/naev-appdir.tar.xz -C  build/dist/ AppDir

          tar -cJvf build/dist/naev-ndata.tar.xz -C staging/usr/share/naev dat

      - name: Upload Naev Binary Artifact
        if: github.event.inputs.release
        uses: actions/upload-artifact@v4
        with:
          name: naev-steamruntime
          path: ${{ github.workspace }}/build/dist/naev.x64

      - name: Upload Naev Data Artifact
        if: github.event.inputs.release
        uses: actions/upload-artifact@v4
        with:
          name: naev-ndata
          path: ${{ github.workspace }}/build/dist/naev-ndata.tar.xz

      - name: Upload Artifact
        if: github.event.inputs.release
        uses: actions/upload-artifact@v4
        with:
          name: naev-linux-appdir-x86-64
          path: "${{ github.workspace }}/build/dist/naev-appdir.tar.xz"

  linux_package:
    needs: linux_build
    if: ${{ inputs.release }}
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/naev/naev-release:latest"
    permissions:
      contents: write

    steps:
      - name: Get AppImage Packaging Script
        uses: actions/download-artifact@v4
        with:
          name: naev-appimage-packaging

      - name: Get AppDir
        uses: actions/download-artifact@v4
        with:
          name: naev-linux-appdir-x86-64

      - name: Package AppImage
        run: |
              chmod +x buildAppImage.sh
              tar -Jxf naev-appdir.tar.xz
              ./buildAppImage.sh -d -n -p -a "./AppDir" -b build

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: naev-linux-x86-64
          path: "${{ github.workspace }}/build/dist/*"

  macos_package:
    needs: macos_build
    if: ${{ inputs.release }}
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/naev/naev-macos:latest"

    steps:
      - name: Get Universal Bundle Packaging Script
        uses: actions/download-artifact@v4
        with:
          name: naev-macos-packaging

      - name: Get DMG Assets
        uses: actions/download-artifact@v4
        with:
          name: naev-macos-dmg
          path: dmg_assets

      - name: Get Entitlements PLIST
        uses: actions/download-artifact@v4
        with:
          name: naev-macos-entitlements

      - name: Get x86_64 macOS Bundle
        uses: actions/download-artifact@v4
        with:
          name: naev-macos-x86_64

      - name: Get ARM64 macOS Bundle
        uses: actions/download-artifact@v4
        with:
          name: naev-macos-aarch64

      - name: Package Universal Bundle
        run: |
              mkdir -p arm64 x86_64
              chmod +x buildUniversalBundle.sh
              unzip naev-macos-aarch64.zip -d arm64
              unzip naev-macos-x86_64.zip -d x86_64
              ./buildUniversalBundle.sh -d -i ./dmg_assets -e ./entitlements.plist -a ./arm64 -x ./x86_64 -b ./build

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: naev-macos
          path: "${{ github.workspace }}/build/dist/*"
