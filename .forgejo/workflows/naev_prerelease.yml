on:
  workflow_dispatch:
  push:
    tags:
      - "!v*.*.*"
      - "v*.*.*-beta*"
      - "v*.*.*-rc*"

name: Pre-Release

permissions: {}
jobs:
  "Package_Source":
    runs-on: naev-release
    steps:
      - name: Checkout Naev Repository
        uses: actions/checkout@v4
        with:
          path: source

          fetch-tags: true
          submodules: true

      - name: Package Dist
        run: |
          meson setup build source -Dexecutable=disabled -Ddocs_c=disabled -Ddocs_lua=disabled --wrap-mode=forcefallback
          meson dist -C build --no-tests --include-subprojects

      - name: Collect Artifacts
        run: |
          mkdir -p build/dist
          cp -r source/utils/ci/itch source/utils/ci/steam source/utils/ci/berg build/dist/
          cp source/utils/buildAppImage.sh build/dist
          cp source/utils/buildUniversalBundle.sh build/dist
          cp -r source/extras/macos/dmg_assets build/dist
          cp source/extras/macos/entitlements.plist build/dist
          mv build/meson-dist/naev-*.tar.xz build/dist/source.tar.xz
          cp source/Changelog.md build/dist
          cp source/dat/VERSION build/dist

      - name: Upload Source Artifact
        uses: actions/upload-artifact@v3
        with:
          name: naev-dist
          path: ${{ github.workspace }}/build/dist/source.tar.xz
          if-no-files-found: error

      - name: Upload Changelog Artifact
        uses: actions/upload-artifact@v4
        with:
          name: naev-changelog
          path: ${{ github.workspace }}/build/dist/Changelog.md
          if-no-files-found: error
      - name: Upload Version Artifact
        uses: actions/upload-artifact@v3
        with:
          name: naev-version
          path: ${{ github.workspace }}/build/dist/VERSION
          if-no-files-found: error

      - name: Upload AppImage Packaging Script Artifact
        uses: actions/upload-artifact@v3
        with:
          name: naev-appimage-packaging
          path: ${{ github.workspace }}/build/dist/buildAppImage.sh
          if-no-files-found: error

      - name: Upload Universal Bundle Packaging Script Artifact
        uses: actions/upload-artifact@v3
        with:
          name: naev-macos-packaging
          path: ${{ github.workspace }}/build/dist/buildUniversalBundle.sh
          if-no-files-found: error

      - name: Upload DMG Assets Artifact
        uses: actions/upload-artifact@v3
        with:
          name: naev-macos-dmg
          path: ${{ github.workspace }}/build/dist/dmg_assets
          if-no-files-found: error
          include-hidden-files: true

      - name: Upload Entitlements PLIST Artifact
        uses: actions/upload-artifact@v3
        with:
          name: naev-macos-entitlements
          path: ${{ github.workspace }}/build/dist/entitlements.plist
          if-no-files-found: error

      - name: Upload Codeberg Deployment Artifact
        uses: actions/upload-artifact@v3
        with:
          name: naev-codeberg-deployment
          path: ${{ github.workspace }}/build/dist/berg/*
          if-no-files-found: error

      - name: Upload Steam Deployment Script Artifact
        uses: actions/upload-artifact@v3
        with:
          name: naev-steam-deployment
          path: ${{ github.workspace }}/build/dist/steam/*
          if-no-files-found: error

      - name: Upload Itch Deployment Artifact
        uses: actions/upload-artifact@v3
        with:
          name: naev-itch-deployment
          path: ${{ github.workspace }}/build/dist/itch/*
          if-no-files-found: error
          include-hidden-files: true

  "Linux_Naev_Release":
    needs: "Package_Source"
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: naev-steamruntime
            config: linux_steamruntime.ini
            wrap_mode: default
            target: x86_64-unknown-linux-gnu

    runs-on: ${{ matrix.image }}

    steps:
      - name: Get Source
        uses: actions/download-artifact@v3
        with:
          name: naev-dist

      - name: Extract Source
        run: |
          mkdir source
          tar -xf source.tar.xz -C source --strip 1

      - name: Meson Setup
        run: |
          meson setup build source \
              --native-file='source/utils/build/linux_steamruntime.ini' \
              --buildtype=debug \
              --wrap-mode=${{ matrix.wrap_mode }} \
              --force-fallback-for=sdl2_image,glpk,SuiteSparse \
              -Dsteamruntime=true \
              -Dprefix="/usr" \
              -Dinstaller=true \
              -Db_lto=true \
              -Dauto_features=enabled \
              -Ddocs_c=disabled \
              -Ddocs_lua=disabled

      - name: Meson Compile
        run: |
          meson compile -C build

      - name: Meson Install
        run: |
          meson install -C build
        env:
          DESTDIR: ${{ github.workspace }}/staging

      - name: Compile AppImage
        run: |
              ./source/utils/buildAppImage.sh -d -s source -b build

      - name: Collect Steam Linux64 Artifacts
        run: |
          mkdir -p build/dist/

          mv staging/usr/bin/naev build/dist/naev.x64
          chmod +x build/dist/naev.x64

          tar -cJvf build/dist/naev-appdir.tar.xz -C  build/dist/ AppDir

          tar -cJvf build/dist/naev-ndata.tar.xz -C staging/usr/share/naev dat

      - name: Upload Naev Binary Artifact
        uses: actions/upload-artifact@v3
        with:
          name: naev-steamruntime
          path: ${{ github.workspace }}/build/dist/naev.x64

      - name: Upload Naev Data Artifact
        uses: actions/upload-artifact@v3
        with:
          name: naev-ndata
          path: ${{ github.workspace }}/build/dist/naev-ndata.tar.xz

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: naev-linux-appdir-x86-64
          path: "${{ github.workspace }}/build/dist/naev-appdir.tar.xz"

  "Linux_Package_Release":
    needs:
      [
        Package_Source,
        Linux_Naev_Release
      ]
    runs-on: naev-release
    steps:
      - name: Get AppImage Packaging Script
        uses: actions/download-artifact@v3
        with:
          name: naev-appimage-packaging

      - name: Get AppDir
        uses: actions/download-artifact@v3
        with:
          name: naev-linux-appdir-x86-64

      - name: Package AppImage
        run: |
              chmod +x buildAppImage.sh
              tar -Jxf naev-appdir.tar.xz
              ./buildAppImage.sh -d -p -a "./AppDir" -b build

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: naev-linux-x86-64
          path: "${{ github.workspace }}/build/dist/*"

  "Windows_Naev_Release":
    needs: "Package_Source"

    strategy:
      fail-fast: false
      matrix:
        include:
          - image: naev-windows
            config: windows_cross_mingw.ini
            target: x86_64-pc-windows-gnu

    runs-on: ${{ matrix.image }}
    env:
      PKG_CONFIG: "x86_64-w64-mingw32-pkg-config"
      PKG_CONFIG_PATH: "/usr/x86_64-w64-mingw32/sys-root/mingw/lib/pkgconfig:/__w/naev/naev/source/subprojects/LuaJIT-04dca7911ea255f37be799c18d74c305b921c1a6/etc"
      BINDGEN_EXTRA_CLANG_ARGS: "--sysroot=/usr/x86_64-w64-mingw32/sys-root/mingw --target=x86_64-w64-mingw32"

    steps:
      - name: Get Source
        uses: actions/download-artifact@v3
        with:
          name: naev-dist

      - name: Extract Source
        run: |
          mkdir source
          tar -xf source.tar.xz -C source --strip 1

      - name: Meson Setup
        # We disable b_lto here because it messes with backtraces on windows
        run: |
          meson setup build source \
              --prefix="$(pwd)"/build/windows \
              --bindir=. \
              -Dndata_path=. \
              --cross-file='source/utils/build/${{ matrix.config }}' \
              --native-file='source/utils/build/linux.ini' \
              --buildtype=debugoptimized \
              --wrap-mode=nopromote \
              -Dinstaller=true \
              -Drelease=true \
              -Db_lto=false \
              -Dauto_features=enabled \
              -Ddocs_c=disabled \
              -Ddocs_lua=disabled

      - name: Meson Compile
        run: |
          meson compile -C build

      - name: Meson Install
        run: |
          meson install -C build

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: naev-win64
          path: ${{ github.workspace }}/build/dist/*
          if-no-files-found: error

  "Darwin_Compile_Naev":
    needs: "Package_Source"

    strategy:
      fail-fast: false
      matrix:
        include:
          - image: naev-macos
            arch: x86_64
            deploymenttarget: "11.0"
            config: macos_cross_osxcross.ini
          - image: naev-macos
            arch: aarch64
            deploymenttarget: "13.0"
            config: macos_aarch64_cross_osxcross.ini

    runs-on: ${{ matrix.image }}
    env:
      BUILDARCH: "${{ matrix.arch }}"
      HOST: "${{ matrix.arch }}-apple-darwin23"
      MACOSX_DEPLOYMENT_TARGET: "${{ matrix.deploymenttarget }}"
      PKG_CONFIG: "${{ matrix.arch }}-apple-darwin23-pkg-config"
      PKG_CONFIG_PATH: "/usr/lib/osxcross/macports/pkgs/opt/local/lib/pkgconfig"
      BINDGEN_EXTRA_CLANG_ARGS: "--sysroot=/usr/lib/osxcross/SDK/MacOSX14.sdk --target=${{ matrix.arch }}-apple-darwin"

    steps:
      - name: Configure Build Environment
        run: |
          /usr/bin/setup-devenv.sh

      - name: Get Source
        uses: actions/download-artifact@v3
        with:
          name: naev-dist

      - name: Extract Source
        run: |
          mkdir source
          tar -xf source.tar.xz -C source --strip 1

      - name: Meson Setup
        run: |
          meson setup build source \
              --prefix="$(pwd)"/build/macos/Naev.app \
              --bindir=Contents/MacOS \
              --libdir=Contents/Frameworks \
              -Dndata_path=Contents/Resources \
              --cross-file='source/utils/build/${{ matrix.config }}' \
              --native-file='source/utils/build/linux.ini' \
              --buildtype=debugoptimized \
              -Dinstaller=false \
              -Drelease=true \
              -Db_lto=true \
              -Dauto_features=enabled \
              -Ddocs_c=disabled \
              -Ddocs_lua=disabled

      - name: Meson Compile
        run: |
          meson compile -C build

      - name: Meson Install
        run: |
          meson install -C build

      - name: Fix zip name
        run: |
          mv build/dist/naev-macos.zip build/dist/naev-macos-${{ matrix.arch }}.zip

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: naev-macos-${{ matrix.arch }}
          path: ${{ github.workspace }}/build/dist/naev-macos-${{ matrix.arch }}.zip
          if-no-files-found: error

  "Darwin_Package_Release":
    needs:
      [
        Package_Source,
        Darwin_Compile_Naev
      ]
    runs-on: naev-macos

    steps:
      - name: Get Universal Bundle Packaging Script
        uses: actions/download-artifact@v3
        with:
          name: naev-macos-packaging

      - name: Get DMG Assets
        uses: actions/download-artifact@v3
        with:
          name: naev-macos-dmg
          path: dmg_assets

      - name: Get Entitlements PLIST
        uses: actions/download-artifact@v3
        with:
          name: naev-macos-entitlements

      - name: Get x86_64 macOS Bundle
        uses: actions/download-artifact@v3
        with:
          name: naev-macos-x86_64

      - name: Get ARM64 macOS Bundle
        uses: actions/download-artifact@v3
        with:
          name: naev-macos-aarch64

      - name: Package Universal Bundle
        run: |
              mkdir -p arm64 x86_64
              chmod +x buildUniversalBundle.sh
              unzip naev-macos-aarch64.zip -d arm64
              unzip naev-macos-x86_64.zip -d x86_64
              ./buildUniversalBundle.sh -d -i ./dmg_assets -e ./entitlements.plist -a ./arm64 -x ./x86_64 -b ./build

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: naev-macos
          path: "${{ github.workspace }}/build/dist/*"

  "Upload_Naev_Release":
    strategy:
      fail-fast: false
      matrix:
        include:
          - releasetype: codeberg
          - releasetype: steam
          - releasetype: itch

    runs-on: naev-release
    needs:
      [
        Package_Source,
        Linux_Package_Release,
        Windows_Naev_Release,
        Darwin_Package_Release,
      ]
    if: ${{ github.repository == 'naev/naev' }}

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ github.workspace }}/build/staging

      - name: Checkout Naev Repository
        if: ${{ matrix.releasetype == 'codeberg' }}
        uses: actions/checkout@v4
        with:
          path: build/staging/repo
          fetch-depth: 0

      - name: Generate Nightly Changelog
        if: ${{ matrix.releasetype == 'codeberg' }}
        working-directory: ${{ github.workspace }}/build/staging/repo
        run: |
          # Populate RELEASE_NOTES env var
          echo "RELEASE_NOTES=$(cat /build/staging/naev-changelog/Changelog.md)" >> $GITHUB_ENV

      - name: Stage Codeberg Release
        if: ${{ matrix.releasetype == 'codeberg' }}
        run: |
          chmod -R +x build/staging/naev-codeberg-deployment
          cp -r build/staging/naev-codeberg-deployment/* "$(pwd)"
          ./BergDeploy.sh -n -t "$(pwd)/build/staging" -o "$(pwd)/build/dist" -r "${{ github.ref_name }}"

      - name: Upload Codeberg Release
        if: ${{ matrix.releasetype == 'codeberg' }}
        uses: Synchro/forgejo-release@self-healing
        with:
          direction: upload
          release-dir: "$(pwd)/build/dist"
          release-notes: "${{ env.RELEASE_NOTES }}"
          override: true
          prerelease: true
          hide-archive-link: true
          tag: ${{ github.ref_name }}

      - name: Build and Upload itch.io Release
        if: ${{ matrix.releasetype == 'itch' }}
        run: |
          chmod -R +x build/staging/naev-itch-deployment
          cp -r build/staging/naev-itch-deployment/* "$(pwd)"
          ./ItchDeploy.sh -p -t "$(pwd)/build/staging" -o "$(pwd)/build/dist"
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}

      - name: Build and Upload Steam Release
        if: ${{ matrix.releasetype == 'steam' }}
        run: |
          chmod -R +x build/staging/naev-steam-deployment
          cp -r build/staging/naev-steam-deployment/* "$(pwd)"
          ./SteamDeploy.sh -p -t "$(pwd)/build/staging" -o "$(pwd)/build/dist"
        env:
          STEAMCMD_USER: ${{ secrets.STEAMCMD_USER }}
          STEAMCMD_PASS: ${{ secrets.STEAMCMD_PASS }}
          TFA_IMAP: ${{ secrets.TFA_IMAP }}
          TFA_PASS: ${{ secrets.TFA_PASS }}
          TFA_USER: ${{ secrets.TFA_USER }}
